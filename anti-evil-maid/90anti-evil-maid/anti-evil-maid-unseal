#!/bin/bash
set -e -o pipefail
shopt -s expand_aliases nullglob

# Anti Evil Maid for dracut by Invisible Things Lab
# Copyright (C) 2010 Joanna Rutkowska <joanna@invisiblethingslab.com>
#
# Mount our device, read the sealed secret blobs, initialize TPM
# and finally try to unseal the secrets and display them to the user


MNT=/anti-evil-maid
UNSEALED_SECRET=/tmp/unsealed-secret
LUKS_HEADER_DUMP=/tmp/luks-header-dump
LUKS_PCR=13
PLYMOUTH_THEME_UNSEALED_SECRET=/usr/share/plymouth/themes/qubes-dark/antievilmaid_secret.png


PLYMOUTH_MESSAGES=()
plymouth_message() {
        plymouth message --text="$*"
        PLYMOUTH_MESSAGES+=("$*")
}
. anti-evil-maid-boilerplate
alias unsealed="[  ! -e $SRK_PASSWORD_CACHE ]"


# mount the AEM device

glob="/dev/disk/by-label/$LABEL_PREFIX*"
DEV=($glob)  # nullglob is set
if [ ${#DEV[@]} = 0 ]; then
    message "Waiting for any Anti Evil Maid device to become available..."
    while :; do
        DEV=($glob)
        ${DEV+break}
        sleep 0.1
    done
fi
LABEL=${DEV##*/}

log "Mounting the $LABEL device..."
mkdir "$MNT"
mount "$DEV" "$MNT"

if anti-evil-maid-removable "$DEV" "$MNT"; then
    alias removable=true
else
    alias removable=false
fi


# setup TPM

log "Initializing TPM..."
modprobe tpm_tis
ip link set dev lo up
mkdir -p "${TPMS_DIR%/*}"
cp -r "$MNT/anti-evil-maid/${TPMS_DIR##*/}" "${TPMS_DIR}"
tcsd_changer_identify
tcsd


# Extend PCR with LUKS header(s)

for param in $(cat /proc/cmdline); do
    case "$param" in rd.luks.uuid=*|rd_LUKS_UUID=*)
        param=${param##*=}
        echo "${param##luks-}"
    esac
done |
sort -u |
while read luksid; do
    waitfor -b "/dev/disk/by-uuid/$luksid"

    cryptsetup luksHeaderBackup "/dev/disk/by-uuid/$luksid" \
               --header-backup-file "$LUKS_HEADER_DUMP"
    luks_header_hash=$(sha1sum "$LUKS_HEADER_DUMP" | cut -f 1 -d ' ')
    rm -f "$LUKS_HEADER_DUMP"
    log "Extending PCR $LUKS_PCR, value $luks_header_hash, device $luksid..."
    tpm_pcr_extend "$LUKS_PCR" "$luks_header_hash"
done


# unseal the secret and unmount the AEM device

sealed_secret_txt=$TPM_DIR/$LABEL/secret.txt.sealed
sealed_secret_png=$TPM_DIR/$LABEL/secret.png.sealed

if plymouth_active && [ -e "$sealed_secret_png" ]; then
    alias png=true
    SEALED_SECRET=$sealed_secret_png
else
    alias png=false
    SEALED_SECRET=$sealed_secret_txt
fi

Z=$(tpm_z_srk)

message "Attempting to unseal the secret from the TPM..."

# we try only once as some TCG 1.2 TPMs start "protecting themselves against
# dictionary attacks" when there's more than 1 try within a short time... -_-
# (TCG 2 fixes that). TODO: just reset this "protection" with tpm_resetdalock

${Z:+:} systemd-ask-password "Enter TPM SRK password" > "$SRK_PASSWORD_CACHE"
if cat "$SRK_PASSWORD_CACHE" |
   tpm_unsealdata $Z -i "$SEALED_SECRET" -o "$UNSEALED_SECRET"; then
    rm -f "$SRK_PASSWORD_CACHE"
fi

log "Unmounting the $LABEL device..."
umount "$MNT"


# display the secret in the next (.png) or the current dialog (.txt)

if unsealed; then
    if png; then
        # Verify if the unsealed PNG secret seems valid and replace the lock icon
        if file "$UNSEALED_SECRET" 2>/dev/null | grep -q PNG; then
            cp "$UNSEALED_SECRET" "$PLYMOUTH_THEME_UNSEALED_SECRET"
        fi

        WHERE="next to the prompt for it"
    else
        {
            message ""
            message "$(cat "$UNSEALED_SECRET" 2>/dev/null)"
            message ""
        } 2>&1  # don't put the secret into the journal

        WHERE="above"
    fi
    message "Never type in your disk password unless the secret $WHERE is correct!"


    # pause

    if removable; then
        waitfor ! -b "$DEV"
    else
        if ! png; then
            msg="Press <ENTER> to continue..."
            if plymouth_active; then
                message "$msg"
                plymouth watch-keystroke --keys=$'\n'
            else
                systemd-ask-password "$msg" >/dev/null
            fi
        fi
    fi
fi


# Clear all messages to hide the secret. Do it even if the unsealing has failed,
# because that's how an attacker would likely behave to trick absentminded users
# into thinking that they've already seen the secret. (See AEM introductory blog
# post FAQ, "Why are there no negative indicators")

if removable || ! png; then
    if plymouth_active; then
        for m in "${PLYMOUTH_MESSAGES[@]}"; do
            plymouth hide-message --text="$m"
        done
    fi

    clear
fi

rm -f "$UNSEALED_SECRET"
